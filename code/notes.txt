Most hardware stuff seems to be working now at least in theory. SD card works in MicroPython but not yet C++, LED display is a bit flickery but I think that's a code timing issue. Next step is a full test program which does the following:
- Uses flash memory for audio storage
- Loads WAV files from SD card when needed
- Pressing buttons displays button number DONE
- Holding button shows relevant pot/CV value DONE
- Start/stop works DONE
- Sync out works DONE (but not sure what final PPQN value will be)
- Trigger outs work DONE
- Sync in flashes LED (another non-repeating timer, maybe with some debouncing)

Current issue (8/11/23), SD card errors often stop the whole program booting.

Thing I just thought of that is probably quite annoying: the characteristic sound of Drumkid is reliant on modulating the velocity of the hits, but this won't really be possible for the trigger outputs. Maybe it's okay. Or maybe the next version needs envelope outputs. Or velocity outputs plus triggers, but that's a lot of sockets.

A thought about how storage should work: there's 2MB flash on the Pico, and not much of that will be needed for anything except audio. Additionally, we shouldn't rely on the SD card for anything mission-critical - it should only be for saving/loading, not reading samples every time you power up the module. Need to figure out how to move audio files from SD to Pico flash memory. Should be able to fit maybe 20s of audio in the flash.

Currently trying to get flash read/write code working, running into issues which may be related to this: https://github.com/raspberrypi/pico-examples/issues/34 (USB serial conflict?)

Okay, progress (18/11/23): flash read/write works with code from the official example, as long as you disable interrupts before calling flash functions then restore them after, as shown here: https://www.makermatrix.com/blog/read-and-write-data-with-the-pi-pico-onboard-flash/

Right, 20/11/23, the time has come to get a proper SWD debug setup working. Pressing bootsel and reconnecting USB every time is a faff, and I'm starting to get weird errors that probably need a proper debugger, so I've ordered a Pico debug probe. Until then I'm going to stop trying to use the SD card, as this seems to be the buggiest part of the code. Probably should leave GPIO pins 0 and 1 free in the next version for UART, but that's no problem because I was going to move those buttons to shift registers anyway.

21/11/23, updated toolchain to use latest windows installer instead of previous cobbled-together setup.

A new, scattershot list of things that would be good/essential, in rough ascending order of difficulty:
- Pitch knob
- Manual tempo adjust
- Output channel toggle
- Crush effect
- Tap tempo
- Load beat
- Edit beat (step sequence)
- Save beat
- Load patch
- Save patch
- Load sample from SD DONE
- Back up all data to SD

25/11/23, debugging works with debug probe, no more pressing stupid button and reconnecting USB cable.

27/11/23, had some success debugging the issue where SD card and DAC don't play well together. Can now do some test SD card stuff (mount, open/append/close file, unmount), then do audio stuff as normal. Had to set audio DMA channel to 2, because 0 and 1 didn't work (pretty sure that SD library claims 2 DMA channels). Can't currently figure out how to tell SD library how to specify exactly which DMA channels to use, which I think is the reason I can only do SD stuff at start of code, not after audio code has begun.

28/11/23, here's the current serial output when trying to run loadSamplesFromSD() via a button:

load from SD...
Notification wait timed out in spi_transfer_wait_complete
DMA CTRL_TRIG: 0b00000000000010001000100000100001
SPI SSPCR0: 0b00000000000000000000010100000111
SPI SSPCR1: 0b00000000000000000000000000000010

*** PANIC ***

f_mount error: A hard error occurred in the low level disk I/O layer (1)

Basically fmount fails.
Okay... maybe the problem is the timers I'm using to update buttons, LEDs, etc. If I remove those timers and do everything in the main loop, SD card and audio work together. For now, I've got it working by setting a flag in the timer callback and running the SD mount function in the main loop when the flag is true.

Aaaaah that was satisfying. Was struggling to read the wav files properly because there were random bytes missing (spoiler: not actually random). Turns out I was using f_gets, which interpreted some characters as terminators or something. Switched to f_read and everything is good.

Can now load a wav sample from SD card into a variable. Next step, loading into flash?

Ugh, clap.wav has a non-44-byte header. Good to see one in the wild, though. Can use it for testing.

End of day summary because everything is slightly broken:
- Using snare.wav because it has a nice normal 44-byte header
- Trying to read 44-byte header first (for validation etc at some point)
- Then trying to read 256-byte chunks straight from SD to flash
- Trying to preview the audio data that should be in the flash but it's not right at the moment (when compared with snare.h integers)
- Next sesh, try to make this preview be correct, maybe having issues with the flash_range_program function's arguments?

29/11/23, a few useful discoveries:
- I can successfully copy samples from SD to flash
- I don't think the flash is fast enough to load samples directly (although not certain about this), so am thinking about just loading them into RAM (copying them to a buffer?)
- I've figured out the WAV header issue, although haven't code it yet. They can basically be any size, and there can even be stuff at the end of a file. This explains it well: https://stackoverflow.com/questions/19991405/how-can-i-detect-whether-a-wav-file-has-a-44-or-46-byte-header

4/12/23, thoughts:
- bit crush is maybe not needed on this version of drumkid, it just makes the interface more cluttered?
- if i'm going to have a volume knob, it needs to be a real one, not software (low volumes sound horrible because you're basically just bitcrushing)

Am now successfully copying four samples from SD and storing them consecutively in flash.

A bit like with DK1, I'm going to have to do some checks on boot to see whether the flash has valid variables, specifically the metadata in the first page.

Currently all samples are stored back to back in flash, which is efficient, but when loaded into RAM they are just put into fixed arrays, regardless of size. Should also store samples in a single block of RAM, to maximise possible cumulative sample size.

Also store other stuff in flash like tempo, current patch/beat, etc.

5/12/23

Current annoyance/problem: because writing to the flash memory requires the interrupts to be paused (probably), it causes an audible glitch if a beat is playing. Either need to only write to flash when output is silent (not great because people might power down their system with DK still running, hence no writing) or, hopefully, figure out a way to write to flash without stopping the interrupts.
Okay, looks like you only need to pause interrupts for SD card reasons, but there's still a slow blocking process maybe when writing to flash.

Oh, and also if I press the tempo change button a bunch of times, everything crashes in a way that might suggest I don't understand alarms. Nope, it's not that... basically it crashes if I the tempo gets too fast. Right, apparently everything just gets too busy - 160BPM is fine until you turn up the chance. This... is actually the biggest bug/error/whatever so far. Can the system just not keep up? Increasing sample buffer doesn't seem to help. Looks like the actual fatal error is on line 337 of the Pico SDK's time.c: assert(rt->alarm_id == id); I guess this means somehow the system is running out of timer IDs? Bit of a guess. Aha! It was the pulse timers. I had set maxPulseTimers = 10, and the system clearly needed more than that. Will rewrite now I understand alarms better. Okay I didn't rewrite it because it was boring. This paragraph is over now.

Winding up for the week maybe. Sync in now basically works, though quite a naiive implementation, not sure how other modules manage the clash between internal clock, external clock, and start/stop button. 24ppqn seems quite annoying, maybe 4 or 16 is better? Maybe needs to be a settable option, given people's differing setups.

12/12/23
Starting to look at swing implementation, read some articles (Roger Linn interview re MPC was v useful) and did some experiments in Cubase. Can definitely improve on DK1 swing implementation, which was limited because of only using 8 bits and other very-basic-microcontroller factors. Looks like maybe the least controversial implementation is to swing the off-beat 8th OR 16th notes by a percentage, e.g. 66% is triplet swing, 50% is straight, but then just don't play any subdivisions...? If you swing the off-beat 8th notes AND the off-beat 16th notes, the 2nd 8th note will no longer line up with the 3rd 16th note. ChatGPT(!) reckons that this will add to the swing feel, but I feel like this is a fudge. Cubase experiments were inconclusive. I guess the zoom control means at least that there is an option for the user not to include smaller subdivisions.

In other news, I was previously scared of multi-core coding but actually it doesn't look too bad, and it would be silly not to try it, given that I could almost double the amount of stuff I can do. Perhaps predictably, some mad stuff happens with interrupts which messes up the SD loading. Not totally sure if the problem is SD loading itself or flash stuff. Okay, I'm not going to have much more coding time in 2023 and I don't want to spend it faffing with IRQ stuff, so I'm going to restore the code to how it was.

Some issues with the new hit scheduling system - the audio is glitchy (too much calculation happening?) and some hits are missing (weird, need to investigate).