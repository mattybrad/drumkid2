Most hardware stuff seems to be working now at least in theory. SD card works in MicroPython but not yet C++, LED display is a bit flickery but I think that's a code timing issue. Next step is a full test program which does the following:
- Uses flash memory for audio storage
- Loads WAV files from SD card when needed
- Pressing buttons displays button number DONE
- Holding button shows relevant pot/CV value DONE
- Start/stop works DONE
- Sync out works DONE (but not sure what final PPQN value will be)
- Trigger outs work DONE
- Sync in flashes LED (another non-repeating timer, maybe with some debouncing)

Current issue (8/11/23), SD card errors often stop the whole program booting.

Thing I just thought of that is probably quite annoying: the characteristic sound of Drumkid is reliant on modulating the velocity of the hits, but this won't really be possible for the trigger outputs. Maybe it's okay. Or maybe the next version needs envelope outputs. Or velocity outputs plus triggers, but that's a lot of sockets.

A thought about how storage should work: there's 2MB flash on the Pico, and not much of that will be needed for anything except audio. Additionally, we shouldn't rely on the SD card for anything mission-critical - it should only be for saving/loading, not reading samples every time you power up the module. Need to figure out how to move audio files from SD to Pico flash memory. Should be able to fit maybe 20s of audio in the flash.

Currently trying to get flash read/write code working, running into issues which may be related to this: https://github.com/raspberrypi/pico-examples/issues/34 (USB serial conflict?)

Okay, progress (18/11/23): flash read/write works with code from the official example, as long as you disable interrupts before calling flash functions then restore them after, as shown here: https://www.makermatrix.com/blog/read-and-write-data-with-the-pi-pico-onboard-flash/

Right, 20/11/23, the time has come to get a proper SWD debug setup working. Pressing bootsel and reconnecting USB every time is a faff, and I'm starting to get weird errors that probably need a proper debugger, so I've ordered a Pico debug probe. Until then I'm going to stop trying to use the SD card, as this seems to be the buggiest part of the code. Probably should leave GPIO pins 0 and 1 free in the next version for UART, but that's no problem because I was going to move those buttons to shift registers anyway.

21/11/23, updated toolchain to use latest windows installer instead of previous cobbled-together setup.

A new, scattershot list of things that would be good/essential, in rough ascending order of difficulty:
- Volume knob
- Pitch knob (right way round)
- Manual tempo adjust
- Output channel toggle
- Crush effect
- Tap tempo
- Load beat
- Edit beat (step sequence)
- Save beat
- Load patch
- Save patch
- Load sample from SD
- Back up all data to SD

25/11/23, debugging works with debug probe, no more pressing stupid button and reconnecting USB cable.

27/11/23, had some success debugging the issue where SD card and DAC don't play well together. Can now do some test SD card stuff (mount, open/append/close file, unmount), then do audio stuff as normal. Had to set audio DMA channel to 2, because 0 and 1 didn't work (pretty sure that SD library claims 2 DMA channels). Can't currently figure out how to tell SD library how to specify exactly which DMA channels to use, which I think is the reason I can only do SD stuff at start of code, not after audio code has begun.

28/11/23, here's the current serial output when trying to run loadSamplesFromSD() via a button:

load from SD...
Notification wait timed out in spi_transfer_wait_complete
DMA CTRL_TRIG: 0b00000000000010001000100000100001
SPI SSPCR0: 0b00000000000000000000010100000111
SPI SSPCR1: 0b00000000000000000000000000000010

*** PANIC ***

f_mount error: A hard error occurred in the low level disk I/O layer (1)

Basically fmount fails.
Okay... maybe the problem is the timers I'm using to update buttons, LEDs, etc. If I remove those timers and do everything in the main loop, SD card and audio work together. For now, I've got it working by setting a flag in the timer callback and running the SD mount function in the main loop when the flag is true.

Aaaaah that was satisfying. Was struggling to read the wav files properly because there were random bytes missing (spoiler: not actually random). Turns out I was using f_gets, which interpreted some characters as terminators or something. Switched to f_read and everything is good.

Can now load a wav sample from SD card into a variable. Next step, loading into flash?

Ugh, clap.wav has a non-44-byte header. Good to see one in the wild, though. Can use it for testing.

End of day summary because everything is slightly broken:
- Using snare.wav because it has a nice normal 44-byte header
- Trying to read 44-byte header first (for validation etc at some point)
- Then trying to read 256-byte chunks straight from SD to flash
- Trying to preview the audio data that should be in the flash but it's not right at the moment (when compared with snare.h integers)
- Next sesh, try to make this preview be correct, maybe having issues with the flash_range_program function's arguments?

29/11/23, 